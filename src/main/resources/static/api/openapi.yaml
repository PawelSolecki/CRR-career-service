openapi: 3.0.3
info:
  title: Career Service
  version: 1.0.0
  description: API for scraping job listings and generating PDFs.
servers:
  - url: http://localhost:8081
paths:
  /api/v1/scrapper:
    get:
      tags:
        - Scrapper
      summary: Scrape job offer
      description: Scrapes job offer data from the given URL.
      parameters:
        - name: url
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: URL of the job offer page
      responses:
        "200":
          description: Job offer successfully scraped
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobOffer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /api/v1/pdf/generate:
    post:
      tags:
        - PDF
      summary: Generate PDF CV
      description: Generates a PDF CV from the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneratePdfRequest"
      responses:
        "200":
          description: |
            PDF successfully generated.
            Returns a binary PDF file that can be downloaded and viewed in a PDF reader.
            The file name will be in format: `cv_{firstName}_{lastName}.pdf`
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        status:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        details:
          type: array
          items:
            type: string
          example: ["firstName: must not be blank", "email: must be valid"]

    JobOffer:
      type: object
      properties:
        url:
          type: string
          format: uri
          example: "https://example.com/job/java-developer"
        company:
          type: string
          example: "ACME Corp"
        title:
          type: string
          example: "Java Developer"
        description:
          type: string
          example: "Exciting opportunity for a Java developer..."
        technologies:
          type: array
          items:
            type: string
          example: ["Java", "Spring Boot", "PostgreSQL"]
        requirements:
          type: array
          items:
            type: string
          example: ["5+ years of Java experience", "Teamwork skills"]
        responsibilities:
          type: array
          items:
            type: string
          example: ["Develop backend services", "Maintain code quality"]
      required:
        - url

    GeneratePdfRequest:
      type: object
      properties:
        template:
          type: string
          enum: [simple, detailed]
          example: "simple"
          description: Template name to use for PDF generation
        language:
          type: string
          enum: [PL, EN]
          example: "EN"
          description: Language of the generated CV
        userCV:
          $ref: "#/components/schemas/UserCV"
        jobOffer:
          $ref: "#/components/schemas/JobOffer"
        skillResult:
          $ref: "#/components/schemas/SkillResult"
      required:
        - template
        - language
        - userCV
        - jobOffer
        - skillResult

    schemas:
    UserCV:
      type: object
      properties:
        personalInfo:
          $ref: "#/components/schemas/PersonalInfo"
          description: Personal information of the CV owner
        skills:
          type: array
          items:
            type: string
          example: ["React.js", "Next.js", "TypeScript"]
        experience:
          type: array
          items:
            $ref: "#/components/schemas/Experience"
        education:
          type: array
          items:
            $ref: "#/components/schemas/Education"
        languages:
          type: array
          items:
            $ref: "#/components/schemas/Language"
        certifications:
          type: array
          items:
            $ref: "#/components/schemas/Certification"
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"
      required:
        - personalInfo

    PersonalInfo:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
          description: First name of the CV owner
        lastName:
          type: string
          example: "Doe"
          description: Last name of the CV owner
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Contact email address
        phone:
          type: string
          example: "+48 123 456 789"
          description: Contact phone number
        role:
          type: string
          example: "Senior React Developer"
          description: Current or desired role
        summary:
          type: string
          example: "Experienced React developer with expertise in Next.js and TypeScript"
          description: Brief professional summary
        linkedIn:
          type: string
          example: "https://linkedin.com/in/johndoe"
          description: LinkedIn profile URL
        github:
          type: string
          example: "https://github.com/johndoe"
          description: GitHub profile URL
        website:
          type: string
          example: "https://johndoe.dev"
          description: Personal website URL
        other:
          type: string
          example: "Available for immediate start"
          description: Additional information
      required:
        - firstName
        - lastName
        - email

    Experience:
      type: object
      properties:
        position:
          type: string
          example: "Senior React Developer"
        company:
          type: string
          example: "Tech Corp"
        url:
          type: string
          example: "https://techcorp.com"
        location:
          type: string
          example: "Warsaw, Poland"
        startDate:
          type: string
          format: date
          example: "2020-01-01"
        endDate:
          type: string
          format: date
          example: "2023-12-31"
        summaries:
          type: array
          items:
            $ref: "#/components/schemas/Summary"

    Education:
      type: object
      properties:
        school:
          type: string
          example: "Technical University"
        degree:
          type: string
          example: "Master's Degree"
        fieldOfStudy:
          type: string
          example: "Computer Science"
        startDate:
          type: string
          format: date
          example: "2015-10-01"
        endDate:
          type: string
          format: date
          example: "2020-06-30"

    Language:
      type: object
      properties:
        language:
          type: string
          example: "English"
        level:
          type: string
          enum: [A1, A2, B1, B2, C1, C2]
          example: "C1"

    Certification:
      type: object
      properties:
        name:
          type: string
          example: "Microsoft Azure Developer Associate"
        issuer:
          type: string
          example: "Microsoft"
        date:
          type: string
          format: date
          example: "2023-01-15"

    Project:
      type: object
      properties:
        name:
          type: string
          example: "Enterprise Portal"
        url:
          type: string
          example: "https://github.com/user/project"
        summaries:
          type: array
          items:
            $ref: "#/components/schemas/Summary"

    Summary:
      type: object
      properties:
        text:
          type: string
          example: "Developed a modern SharePoint portal using Next.js"
        technologies:
          type: array
          items:
            type: string
          example: ["Next.js", "TypeScript", "SharePoint"]

    SkillResult:
      type: object
      properties:
        hardSkills:
          type: array
          items:
            $ref: "#/components/schemas/SkillItem"
        softSkills:
          type: array
          items:
            $ref: "#/components/schemas/SkillItem"
        tools:
          type: array
          items:
            $ref: "#/components/schemas/SkillItem"

    SkillItem:
      type: object
      properties:
        name:
          type: string
          example: "Java"
        score:
          type: number
          format: double
          example: 0.85
      required:
        - name
        - score

  responses:
    BadRequest:
      description: Bad Request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validation:
              value:
                timestamp: "2024-01-15T10:30:00Z"
                status: 400
                error: "Bad Request"
                message: "Validation failed"
                details: ["firstName: must not be blank"]
            invalidFormat:
              value:
                timestamp: "2024-01-15T10:30:00Z"
                status: 400
                error: "Bad Request"
                message: "Invalid format"
                details: ["Invalid value: 'ABC'. Accepted values are: [PL, EN]"]

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            template:
              value:
                timestamp: "2024-01-15T10:30:00Z"
                status: 404
                error: "Not Found"
                message: "Template not found"
                details: ["Template not found: modern"]
            endpoint:
              value:
                timestamp: "2024-01-15T10:30:00Z"
                status: 404
                error: "Not Found"
                message: "Endpoint not found"
                details: ["No handler found for GET /invalid"]

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            default:
              value:
                timestamp: "2024-01-15T10:30:00Z"
                status: 500
                error: "Internal Server Error"
                message: "Internal server error"
                details: ["An unexpected error occurred"]
